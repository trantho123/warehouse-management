// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type TransactionType string

const (
	TransactionTypeIN  TransactionType = "IN"
	TransactionTypeOUT TransactionType = "OUT"
)

func (e *TransactionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionType(s)
	case string:
		*e = TransactionType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionType: %T", src)
	}
	return nil
}

type NullTransactionType struct {
	TransactionType TransactionType `json:"transaction_type"`
	Valid           bool            `json:"valid"` // Valid is true if TransactionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionType) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionType), nil
}

type InoutTransaction struct {
	ID          int32            `json:"id"`
	WarehouseID pgtype.Int4      `json:"warehouse_id"`
	ProductID   pgtype.Int4      `json:"product_id"`
	Quantity    int32            `json:"quantity"`
	Type        TransactionType  `json:"type"`
	CreatedBy   pgtype.Int4      `json:"created_by"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}

type Inventory struct {
	WarehouseID int32 `json:"warehouse_id"`
	ProductID   int32 `json:"product_id"`
	Quantity    int32 `json:"quantity"`
}

type Product struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Sku         string         `json:"sku"`
	Description pgtype.Text    `json:"description"`
	UnitPrice   pgtype.Numeric `json:"unit_price"`
}

type Role struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

type User struct {
	ID        int32            `json:"id"`
	Username  string           `json:"username"`
	Email     string           `json:"email"`
	Password  string           `json:"password"`
	RoleID    pgtype.Int4      `json:"role_id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

type Warehouse struct {
	ID       int32       `json:"id"`
	Name     string      `json:"name"`
	Location pgtype.Text `json:"location"`
}
